if [ ! "$IG_TCP_CPORTS" == "" ]; then
IG_TCP_CPORTS=`echo "$IG_TCP_CPORTS" | tr ',' ' '`
PROTO="tcp"
for i in `echo $IG_TCP_CPORTS`; do
        if [ "$(echo $i | grep "_")" == "" ]; then
         if [ ! "$i" == "" ]; then
		if [ $EXECUTOR == "nft" ]; then
                   if [ "$USE_IPV6" == "1" ]; then
                   #   $IP6T -A INPUT -m state --state NEW -m tcp -p $PROTO --dport $i -d $VNET -j ACCEPT
		       $NFT add rule ip6 filter INPUT ip6 daddr $VNET ct state new $PROTO dport $i counter accept
		   else
                       #$IPT $IPT_FLAGS -A INPUT -p $PROTO  -s 0/0 -d $VNET --dport $i -j ACCEPT
                       $NFT add rule ip filter INPUT ip daddr $VNET $PROTO dport $i counter accept
                   fi
		else
                   if [ "$USE_IPV6" == "1" ]; then
                      $IP6T -A INPUT -m state --state NEW -m tcp -p $PROTO --dport $i -d $VNET -j ACCEPT
                   else
                      $IPT $IPT_FLAGS -A INPUT -p $PROTO  -s 0/0 -d $VNET --dport $i -j ACCEPT
                   fi
		fi
                eout "{glob} opening inbound $PROTO port $i on $VNET"
         fi
        else
                i=`echo $i | tr '_' ':'`
                j=`echo $i | tr ':' '-'`
                if [ ! "$i" == "" ]; then
		   if [ $EXECUTOR == "nft" ]; then
                      if [ "$USE_IPV6" == "1" ]; then
                         #$IP6T -A INPUT -m state --state NEW -m tcp -p $PROTO --dport $i -d $VNET -j ACCEPT
		         $NFT add rule ip6 filter INPUT ip6 daddr $VNET ct state new $PROTO dport $j counter accept
		      else
                         #$IPT $IPT_FLAGS -A INPUT -p $PROTO  -s 0/0 -d $VNET --dport $i -j ACCEPT
                         $NFT add rule ip filter INPUT ip daddr $VNET $PROTO dport $j counter accept
                      fi
		   else
                      if [ "$USE_IPV6" == "1" ]; then
                         $IP6T -A INPUT -m state --state NEW -m tcp -p $PROTO --dport $i -d $VNET -j ACCEPT
                      else
                         $IPT $IPT_FLAGS -A INPUT -p $PROTO  -s 0/0 -d $VNET --dport $i -j ACCEPT
                      fi
	           fi
                   eout "{glob} opening inbound $PROTO port $i on $VNET"
                fi
        fi
done
fi

if [ ! "$IG_UDP_CPORTS" == "" ]; then
IG_UDP_CPORTS=`echo "$IG_UDP_CPORTS" | tr ',' ' '`
PROTO="udp"
for i in `echo $IG_UDP_CPORTS`; do
        if [ "$(echo $i | grep "_")" == "" ]; then
         if [ ! "$i" == "" ]; then
		if [ $EXECUTOR == "nft" ]; then
                   #$IPT $IPT_FLAGS -A INPUT -p $PROTO  -s 0/0 -d $VNET --dport $i -j ACCEPT
                   if [ "$USE_IPV6" == "1" ]; then
		       $NFT add rule ip6 filter INPUT ip6 daddr $VNET $PROTO dport $i counter accept
		   else
                       $NFT add rule ip filter INPUT ip daddr $VNET $PROTO dport $i counter accept
		   fi
		else
                   $IPT $IPT_FLAGS -A INPUT -p $PROTO  -s 0/0 -d $VNET --dport $i -j ACCEPT
		   # TODO ipv6?
		fi
                eout "{glob} opening inbound $PROTO port $i on $VNET"
         fi
        else
                i=`echo $i | tr '_' ':'`
                j=`echo $i | tr ':' '-'`
                if [ ! "$i" == "" ]; then
		   if [ $EXECUTOR == "nft" ]; then
                      if [ "$USE_IPV6" == "1" ]; then
                          $NFT add rule ip6 filter INPUT ip6 daddr $VNET $PROTO dport $j counter accept
                      else
                          #$IPT $IPT_FLAGS -A INPUT -p $PROTO  -s 0/0 -d $VNET --dport $i -j ACCEPT
                          $NFT add rule ip filter INPUT ip daddr $VNET $PROTO dport $j counter accept
                      fi
		   else
                      $IPT $IPT_FLAGS -A INPUT -p $PROTO  -s 0/0 -d $VNET --dport $i -j ACCEPT
		      # TODO ipv6?
		   fi
                   eout "{glob} opening inbound $PROTO port $i on $VNET"
                fi
        fi
done
fi

if [ "$EGF" == "1" ]; then
if [ ! "$EG_TCP_CPORTS" == "" ]; then
EG_TCP_CPORTS=`echo "$EG_TCP_CPORTS" | tr ',' ' '`
PROTO="tcp"
for i in `echo $EG_TCP_CPORTS`; do
        if [ "$(echo $i | grep "_")" == "" ]; then
         if [ ! "$i" == "" ]; then
		if [ $EXECUTOR == "nft" ]; then
                   if [ "$USE_IPV6" == "1" ]; then
                      $NFT add rule ip6 filter OUTPUT ip6 saddr $VNET $PROTO dport $i counter accept
                   else
                      #$IPT $IPT_FLAGS -A OUTPUT -p $PROTO  -s $VNET --dport $i -j ACCEPT
                      $NFT add rule ip filter OUTPUT ip saddr $VNET $PROTO dport $i counter accept
		   fi
		else
                   $IPT $IPT_FLAGS -A OUTPUT -p $PROTO  -s $VNET --dport $i -j ACCEPT
		   # TODO ipv6?
		fi
                eout "{glob} opening outbound $PROTO port $i on $VNET"
         fi
        else
                i=`echo $i | tr '_' ':'`
                j=`echo $i | tr ':' '-'`
                if [ ! "$i" == "" ]; then
		   if [ $EXECUTOR == "nft" ]; then
                        if [ "$USE_IPV6" == "1" ]; then
                           $NFT add rule ip6 filter OUTPUT ip6 saddr $VNET $PROTO dport $j counter accept
                        else
                           #$IPT $IPT_FLAGS -A OUTPUT -p $PROTO  -s $VNET --dport $i -j ACCEPT
		           $NFT add rule ip filter OUTPUT ip saddr $VNET $PROTO dport $j counter accept
		        fi
		   else
                        $IPT $IPT_FLAGS -A OUTPUT -p $PROTO  -s $VNET --dport $i -j ACCEPT
		        # TODO ipv6?
		   fi
                   eout "{glob} opening outbound $PROTO port $i on $VNET"
                fi
        fi
done
fi
fi

if [ "$EGF" == "1" ]; then
if [ ! "$EG_UDP_CPORTS" == "" ]; then
EG_UDP_CPORTS=`echo "$EG_UDP_CPORTS" | tr ',' ' '`
PROTO="udp"
for i in `echo $EG_UDP_CPORTS`; do
        if [ "$(echo $i | grep "_")" == "" ]; then
         if [ ! "$i" == "" ]; then
		if [ $EXECUTOR == "nft" ]; then
                   #$IPT $IPT_FLAGS -A OUTPUT -p $PROTO  -s $VNET --dport $i -j ACCEPT
                   $NFT add rule ip filter OUTPUT ip saddr $VNET $PROTO dport $i counter accept		   
                else
                   $IPT $IPT_FLAGS -A OUTPUT -p $PROTO  -s $VNET --dport $i -j ACCEPT
		   # TODO ipv6?
		fi
                eout "{glob} opening outbound $PROTO port $i on $VNET"
         fi
        else
                i=`echo $i | tr '_' ':'`
                j=`echo $i | tr ':' '-'`
                if [ ! "$i" == "" ]; then
	           if [ $EXECUTOR == "nft" ]; then
                      #$IPT $IPT_FLAGS -A OUTPUT -p $PROTO  -s $VNET --dport $i -j ACCEPT
                      $NFT add rule ip filter OUTPUT ip saddr $VNET $PROTO dport $j counter accept
                   else
                      $IPT $IPT_FLAGS -A OUTPUT -p $PROTO  -s $VNET --dport $i -j ACCEPT
		      # TODO ipv6?
		   fi
                   eout "{glob} opening outbound $PROTO port $i on $VNET"
                fi
        fi
done
fi
fi

if [ ! "$IG_ICMP_TYPES" == "" ]; then
PROTO="icmp"
if [ "$ICMP_LIM" == "" ]; then
	ICMP_LIM=0
fi
if [ "$(echo $ICMP_LIM | tr '/' ' ' | awk '{print$1}')" -gt "0" ]; then
	ICMP_EARGS="-m limit --limit $ICMP_LIM"
else
	ICMP_EARGS=""
fi
IG_ICMP_TYPES=`echo $IG_ICMP_TYPES | tr ',' ' '`
	for i in `echo $IG_ICMP_TYPES`; do
         if [ ! "$i" == "" ]; then
                i=`echo $i | tr '[:upper:]' '[:lower:]'`
                if [ "$i" == "all" ]; then
	          if [ $EXECUTOR == "nft" ]; then
                     # TODO support limit for nft?
                     #$IPT $IPT_FLAGS -A INPUT -p icmp -d $VNET  -s 0/0 $ICMP_EARGS -j ACCEPT
                     $NFT add rule ip filter INPUT ip protocol icmp ip daddr $VNET counter accept
		  else
                     $IPT $IPT_FLAGS -A INPUT -p icmp -d $VNET  -s 0/0 $ICMP_EARGS -j ACCEPT
		  fi
                  eout "{glob} opening inbound $PROTO all on $VNET"
                else
	          if [ $EXECUTOR == "nft" ]; then
                     # TODO support limit for nft?
                     #$IPT $IPT_FLAGS -A INPUT -p icmp --icmp-type $i -d $VNET  -s 0/0 $ICMP_EARGS -j ACCEPT
		     $NFT add rule ip filter INPUT ip daddr $VNET icmp type $i counter accept
	          else
                     $IPT $IPT_FLAGS -A INPUT -p icmp --icmp-type $i -d $VNET  -s 0/0 $ICMP_EARGS -j ACCEPT
		  fi
                  eout "{glob} opening inbound $PROTO type $i on $VNET"
                fi
	 fi
	done
	if [ "$USE_IPV6" == "1" ]; then
           if [ $EXECUTOR == "nft" ]; then
	      $NFT add rule ip6 filter INPUT meta l4proto ipv6-icmp counter accept
	   else
	      $IP6T -A INPUT -p ipv6-icmp -j ACCEPT
	   fi
	fi
fi

if [ "$EGF" == "1" ]; then
if [ ! "$EG_ICMP_TYPES" == "" ]; then
PROTO="icmp"
if [ "$ICMP_LIM" == "" ]; then
        ICMP_LIM=0
fi
if [ "$(echo $ICMP_LIM | tr '/' ' ' | awk '{print$1}')" -gt "0" ]; then
        ICMP_EARGS="-m limit --limit $ICMP_LIM"
else
        ICMP_EARGS=""
fi
EG_ICMP_TYPES=`echo $EG_ICMP_TYPES | tr ',' ' '`
        for i in `echo $EG_ICMP_TYPES`; do
         if [ ! "$i" == "" ]; then
		i=`echo $i | tr '[:upper:]' '[:lower:]'`
		if [ "$i" == "all" ]; then
	          if [ $EXECUTOR == "nft" ]; then
                     #$IPT $IPT_FLAGS -A OUTPUT -p icmp  -s $VNET -d 0/0 $ICMP_EARGS  -j ACCEPT
		     # TODO support limit for nft?
		     $NFT add rule ip filter INPUT ip protocol icmp ip daddr $VNET counter accept
                  else
                     $IPT $IPT_FLAGS -A OUTPUT -p icmp  -s $VNET -d 0/0 $ICMP_EARGS  -j ACCEPT
		     # TODO ipv6?
		  fi
                  eout "{glob} opening outbound $PROTO all on $VNET"
		else
                  if [ $EXECUTOR == "nft" ]; then
		     #$IPT $IPT_FLAGS -A OUTPUT -p icmp --icmp-type $i  -s $VNET -d 0/0 $ICMP_EARGS -j ACCEPT
		     # TODO support limit for nft?
		     $NFT add rule ip filter OUTPUT ip saddr $VNET icmp type echo-request counter accept
                  else
                     $IPT $IPT_FLAGS -A OUTPUT -p icmp --icmp-type $i  -s $VNET -d 0/0 $ICMP_EARGS -j ACCEPT
		     # TODO ipv6?
		  fi
                  eout "{glob} opening outbound $PROTO type $i on $VNET"
		fi
         fi
        done
fi
fi

if [ "$EGF" == "1" ]; then
if [ ! "$EG_TCP_UID" == "" ]; then
EG_TCP_UID=`echo "$EG_TCP_UID" | tr ',' ' '`
PROTO="tcp"
for i in `echo $EG_TCP_UID`; do
uid=`echo $i | tr ':' ' ' | awk '{print$1}'`
port=`echo $i | tr ':' ' ' | awk '{print$2}'`

        if [ "$(echo $port | grep "_")" == "" ]; then
         if [ ! "$port" == "" ]; then
                if [ $EXECUTOR == "nft" ]; then
                   #$IPT $IPT_FLAGS -A OUTPUT -p $PROTO  -s $VNET --dport $port --match owner --uid-owner $uid -j ACCEPT
                   $NFT add rule ip filter OUTPUT $PROTO saddr $VNET tcp dport $port skuid $uid counter accept
                else
                   $IPT $IPT_FLAGS -A OUTPUT -p $PROTO -s $VNET --dport $port --match owner --uid-owner $uid -j ACCEPT
		   # TODO ipv6?
		fi
                eout "{glob} opening outbound $PROTO port $port for uid $uid from $VNET"
         fi
        else
                i=`echo $port | tr '_' ':'`
                j=`echo $i | tr ':' '-'`
                if [ ! "$i" == "" ]; then
	           if [ $EXECUTOR == "nft" ]; then
                      #$IPT $IPT_FLAGS -A OUTPUT -p $PROTO  -s $VNET --dport $i --match owner --uid-owner $uid -j ACCEPT
                      $NFT add rule ip filter OUTPUT $PROTO saddr $VNET tcp dport $j skuid $uid counter accept
                   else
                      $IPT $IPT_FLAGS -A OUTPUT -p $PROTO -s $VNET --dport $i --match owner --uid-owner $uid -j ACCEPT
		      # TODO ipv6?
		   fi
                   eout "{glob} opening outbound $PROTO port $i for uid $uid from $VNET"
                fi
        fi
done
fi
fi

if [ "$EGF" == "1" ]; then
if [ ! "$EG_UDP_UID" == "" ]; then
EG_UDP_UID=`echo "$EG_UDP_UID" | tr ',' ' '`
PROTO="udp"
for i in `echo $EG_UDP_UID`; do
uid=`echo $i | tr ':' ' ' | awk '{print$1}'`
port=`echo $i | tr ':' ' ' | awk '{print$2}'`

        if [ "$(echo $port | grep "_")" == "" ]; then
         if [ ! "$port" == "" ]; then
                if [ $EXECUTOR == "nft" ]; then
                   #$IPT $IPT_FLAGS -A OUTPUT -p $PROTO  -s $VNET --dport $port --match owner --uid-owner $uid -j ACCEPT
                   $NFT add rule ip filter OUTPUT ip saddr $VNET $PROTO dport $port skuid $uid counter accept
                else
                   $IPT $IPT_FLAGS -A OUTPUT -p $PROTO  -s $VNET --dport $port --match owner --uid-owner $uid -j ACCEPT
		   # TODO ipv6?
		fi
                eout "{glob} opening outbound $PROTO port $port for uid $uid from $VNET"
         fi
        else
                i=`echo $port | tr '_' ':'`
                j=`echo $i | tr ':' '-'`
                if [ ! "$i" == "" ]; then
	           if [ $EXECUTOR == "nft" ]; then
                      #$IPT $IPT_FLAGS -A OUTPUT -p $PROTO  -s $VNET --dport $i --match owner --uid-owner $uid -j ACCEPT
                      $NFT add rule ip filter OUTPUT ip saddr $VNET $PROTO dport $j skuid $uid counter accept
                   else
                      $IPT $IPT_FLAGS -A OUTPUT -p $PROTO  -s $VNET --dport $i --match owner --uid-owner $uid -j ACCEPT
		      # TODO ipv6?
		   fi
                   eout "{glob} opening outbound $PROTO port $i for uid $uid from $VNET"
                fi
        fi
done
fi
fi

if [ "$EGF" == "1" ]; then
 if [ "$EG_DROP_CMD" == "1" ]; then
	if [ $EXECUTOR == "nft" ]; then
	   $NFT add chain ip filter DEG
	else
           $IPT $IPT_FLAGS -N DEG
	fi
	for i in `echo $EG_DROP_CMD | tr ',' ' '`; do
		si=`echo $i | cut -c 1-6`		
		if [ "LOG_DROP" == "1" ]; then 
		   if [ $EXECUTOR == "nft" ]; then
                      #$IPT $IPT_FLAGS -A DEG -m limit --limit=$LOG_RATE/minute -j $LOG_TARGET --log-level=$LOG_LEVEL $LEXT --log-prefix="** DEG_$si ** "
		      $NFT add rule ip filter DEG limit rate $LOG_RATE/minute burst 5 packets counter log prefix \"\*\* DEG_ \*\* \" level $LOG_LEVEL $LEXT
                   else
                      $IPT $IPT_FLAGS -A DEG -m limit --limit=$LOG_RATE/minute -j $LOG_TARGET --log-level=$LOG_LEVEL $LEXT --log-prefix="** DEG_$si ** "
		   fi
		fi
		if [ $EXECUTOR == "nft" ]; then
                   # --cmd-owner is removed in kernel 2.6.15 https://superuser.com/questions/34782/with-linux-iptables-is-it-possible-to-log-the-process-command-name-that-initiat
                   #$IPT $IPT_FLAGS -A DEG -s 0/0 -d 0/0 -m owner --cmd-owner=$i -j $ALL_STOP
                   :
                else
                   $IPT $IPT_FLAGS -A DEG -s 0/0 -d 0/0 -m owner --cmd-owner=$i -j $ALL_STOP
		fi
	done
                if [ $EXECUTOR == "nft" ]; then
		   $NFT add rule ip filter OUTPUT counter jump DEG
                else
		   $IPT $IPT_FLAGS -A OUTPUT -j DEG
		fi
 fi
fi
