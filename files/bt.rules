eout "{glob} loading bt.rules"

# Load our Deny Hosts rules
glob_deny_download
deny_hosts $GDENY_HOSTS TGDENY
deny_hosts $DENY_HOSTS TDENY

# Load our projecthoneypot drop list
dlist_php
dlist_php_hosts

# Load our dshield drop list
dlist_dshield
dlist_dshield_hosts

# Load our Spamhaus Don't Route Or Peer List
dlist_spamhaus
dlist_spamhaus_hosts

# Block common drop ports
cdports

# Filter all traffic not from local gateway
if [ ! "$VF_LGATE" == "" ]; then
 lgate_mac
fi

if [ "$RAB" == "1" ] && [ "$RAB_SANITY" == "1" ]; then
	eout "{rab} set active RAB_SANITY"
	RAB_SANITY_FLAGS="-m recent --set"
else
	RAB_SANITY_FLAGS=""
fi
if [ "$PKT_SANITY" == "1" ]; then
	eout "{pkt_sanity} set active PKT_SANITY"
	# Drop packets With invalid flag order
        eout "{pkt_sanity} deny inbound tcp-flag pairs ALL NONE"
        eout "{pkt_sanity} deny inbound tcp-flag pairs SYN,FIN SYN,FIN"
        eout "{pkt_sanity} deny inbound tcp-flag pairs SYN,RST SYN,RST"
        eout "{pkt_sanity} deny inbound tcp-flag pairs FIN,RST FIN,RST"
        eout "{pkt_sanity} deny inbound tcp-flag pairs ACK,FIN FIN"
        eout "{pkt_sanity} deny inbound tcp-flag pairs ACK,URG URG"
        eout "{pkt_sanity} deny inbound tcp-flag pairs ACK,PSH PSH"
        eout "{pkt_sanity} deny inbound tcp-flag pairs ALL FIN,URG,PSH"
        eout "{pkt_sanity} deny inbound tcp-flag pairs ALL SYN,RST,ACK,FIN,URG"
        eout "{pkt_sanity} deny inbound tcp-flag pairs ALL ALL"
        eout "{pkt_sanity} deny inbound tcp-flag pairs ALL FIN"
        if [ $EXECUTOR == "nft" ]; then
           # TODO nft
        else
        $IPT $IPT_FLAGS -N IN_SANITY
        if [ "$LOG_DROP" == "1" ]; then
         $IPT $IPT_FLAGS -A IN_SANITY  -p tcp --tcp-flags ALL NONE -m limit --limit=$LOG_RATE/minute -j $LOG_TARGET --log-level=$LOG_LEVEL $LEXT --log-prefix="** SANITY ** "
	fi
        if [ "$RAB_LOG_HIT" == "1" ]; then
         $IPT $IPT_FLAGS -A IN_SANITY  -p tcp --tcp-flags ALL NONE -m limit --limit=$LOG_RATE/minute -j $LOG_TARGET --log-level=$LOG_LEVEL $LEXT --log-prefix="** RABHIT ** "
	fi
        $IPT $IPT_FLAGS -A IN_SANITY  -p tcp --tcp-flags ALL NONE $RAB_SANITY_FLAGS -j $TCP_STOP
        if [ "$LOG_DROP" == "1" ]; then
         $IPT $IPT_FLAGS -A IN_SANITY  -p tcp --tcp-flags SYN,FIN SYN,FIN -m limit --limit=$LOG_RATE/minute -j $LOG_TARGET --log-level=$LOG_LEVEL $LEXT --log-prefix="** SANITY ** "
	fi
        if [ "$RAB_LOG_HIT" == "1" ]; then
         $IPT $IPT_FLAGS -A IN_SANITY  -p tcp --tcp-flags SYN,FIN SYN,FIN -m limit --limit=$LOG_RATE/minute -j $LOG_TARGET --log-level=$LOG_LEVEL $LEXT --log-prefix="** RABHIT ** "
	fi
        $IPT $IPT_FLAGS -A IN_SANITY  -p tcp --tcp-flags SYN,FIN SYN,FIN $RAB_SANITY_FLAGS -j $TCP_STOP
        if [ "$LOG_DROP" == "1" ]; then
         $IPT $IPT_FLAGS -A IN_SANITY  -p tcp --tcp-flags SYN,RST SYN,RST -m limit --limit=$LOG_RATE/minute -j $LOG_TARGET --log-level=$LOG_LEVEL $LEXT --log-prefix="** SANITY ** "
	fi
        if [ "$RAB_LOG_HIT" == "1" ]; then
         $IPT $IPT_FLAGS -A IN_SANITY  -p tcp --tcp-flags SYN,RST SYN,RST -m limit --limit=$LOG_RATE/minute -j $LOG_TARGET --log-level=$LOG_LEVEL $LEXT --log-prefix="** RABHIT ** "
	fi
        $IPT $IPT_FLAGS -A IN_SANITY  -p tcp --tcp-flags SYN,RST SYN,RST $RAB_SANITY_FLAGS -j $TCP_STOP
        if [ "$LOG_DROP" == "1" ]; then
         $IPT $IPT_FLAGS -A IN_SANITY  -p tcp --tcp-flags FIN,RST FIN,RST -m limit --limit=$LOG_RATE/minute -j $LOG_TARGET --log-level=$LOG_LEVEL $LEXT --log-prefix="** SANITY ** "
	fi
        if [ "$RAB_LOG_HIT" == "1" ]; then
         $IPT $IPT_FLAGS -A IN_SANITY  -p tcp --tcp-flags FIN,RST FIN,RST -m limit --limit=$LOG_RATE/minute -j $LOG_TARGET --log-level=$LOG_LEVEL $LEXT --log-prefix="** RABHIT ** "
	fi
        $IPT $IPT_FLAGS -A IN_SANITY  -p tcp --tcp-flags FIN,RST FIN,RST $RAB_SANITY_FLAGS -j $TCP_STOP
        if [ "$LOG_DROP" == "1" ]; then
         $IPT $IPT_FLAGS -A IN_SANITY  -p tcp --tcp-flags ACK,FIN FIN -m limit --limit=$LOG_RATE/minute -j $LOG_TARGET --log-level=$LOG_LEVEL $LEXT --log-prefix="** SANITY ** "
	fi
        if [ "$RAB_LOG_HIT" == "1" ]; then
         $IPT $IPT_FLAGS -A IN_SANITY  -p tcp --tcp-flags ACK,FIN FIN -m limit --limit=$LOG_RATE/minute -j $LOG_TARGET --log-level=$LOG_LEVEL $LEXT --log-prefix="** RABHIT ** "
	fi
        $IPT $IPT_FLAGS -A IN_SANITY  -p tcp --tcp-flags ACK,FIN FIN $RAB_SANITY_FLAGS -j $TCP_STOP
        if [ "$LOG_DROP" == "1" ]; then
         $IPT $IPT_FLAGS -A IN_SANITY  -p tcp --tcp-flags ACK,URG URG -m limit --limit=$LOG_RATE/minute -j $LOG_TARGET --log-level=$LOG_LEVEL $LEXT --log-prefix="** SANITY ** "
	fi
        if [ "$RAB_LOG_HIT" == "1" ]; then
         $IPT $IPT_FLAGS -A IN_SANITY  -p tcp --tcp-flags ACK,URG URG -m limit --limit=$LOG_RATE/minute -j $LOG_TARGET --log-level=$LOG_LEVEL $LEXT --log-prefix="** RABHIT ** "
	fi
        $IPT $IPT_FLAGS -A IN_SANITY  -p tcp --tcp-flags ACK,URG URG $RAB_SANITY_FLAGS -j $TCP_STOP
        if [ "$LOG_DROP" == "1" ]; then
         $IPT $IPT_FLAGS -A IN_SANITY  -p tcp --tcp-flags ACK,PSH PSH -m limit --limit=$LOG_RATE/minute -j $LOG_TARGET --log-level=$LOG_LEVEL $LEXT --log-prefix="** SANITY ** "
	fi
        if [ "$RAB_LOG_HIT" == "1" ]; then
         $IPT $IPT_FLAGS -A IN_SANITY  -p tcp --tcp-flags ACK,PSH PSH -m limit --limit=$LOG_RATE/minute -j $LOG_TARGET --log-level=$LOG_LEVEL $LEXT --log-prefix="** RABHIT ** "
	fi
        $IPT $IPT_FLAGS -A IN_SANITY  -p tcp --tcp-flags ACK,PSH PSH $RAB_SANITY_FLAGS -j $TCP_STOP
        if [ "$LOG_DROP" == "1" ]; then
         $IPT $IPT_FLAGS -A IN_SANITY  -p tcp --tcp-flags ALL FIN,URG,PSH -m limit --limit=$LOG_RATE/minute -j $LOG_TARGET --log-level=$LOG_LEVEL $LEXT --log-prefix="** SANITY ** "
	fi
        if [ "$RAB_LOG_HIT" == "1" ]; then
         $IPT $IPT_FLAGS -A IN_SANITY  -p tcp --tcp-flags ALL FIN,URG,PSH -m limit --limit=$LOG_RATE/minute -j $LOG_TARGET --log-level=$LOG_LEVEL $LEXT --log-prefix="** RABHIT ** "
	fi
        $IPT $IPT_FLAGS -A IN_SANITY  -p tcp --tcp-flags ALL FIN,URG,PSH $RAB_SANITY_FLAGS -j $TCP_STOP
        if [ "$LOG_DROP" == "1" ]; then
         $IPT $IPT_FLAGS -A IN_SANITY  -p tcp --tcp-flags ALL SYN,RST,ACK,FIN,URG -m limit --limit=$LOG_RATE/minute -j $LOG_TARGET --log-level=$LOG_LEVEL $LEXT --log-prefix="** SANITY ** "
	fi
        if [ "$RAB_LOG_HIT" == "1" ]; then
         $IPT $IPT_FLAGS -A IN_SANITY  -p tcp --tcp-flags ALL SYN,RST,ACK,FIN,URG -m limit --limit=$LOG_RATE/minute -j $LOG_TARGET --log-level=$LOG_LEVEL $LEXT --log-prefix="** RABHIT ** "
	fi
        $IPT $IPT_FLAGS -A IN_SANITY  -p tcp --tcp-flags ALL SYN,RST,ACK,FIN,URG $RAB_SANITY_FLAGS -j $TCP_STOP
        if [ "$LOG_DROP" == "1" ]; then
         $IPT $IPT_FLAGS -A IN_SANITY  -p tcp --tcp-flags ALL ALL -m limit --limit=$LOG_RATE/minute -j $LOG_TARGET --log-level=$LOG_LEVEL $LEXT --log-prefix="** SANITY ** "
	fi
        if [ "$RAB_LOG_HIT" == "1" ]; then
         $IPT $IPT_FLAGS -A IN_SANITY  -p tcp --tcp-flags ALL ALL -m limit --limit=$LOG_RATE/minute -j $LOG_TARGET --log-level=$LOG_LEVEL $LEXT --log-prefix="** RABHIT ** "
	fi
        $IPT $IPT_FLAGS -A IN_SANITY  -p tcp --tcp-flags ALL ALL $RAB_SANITY_FLAGS -j $TCP_STOP
        if [ "$LOG_DROP" == "1" ]; then
         $IPT $IPT_FLAGS -A IN_SANITY  -p tcp --tcp-flags ALL FIN -m limit --limit=$LOG_RATE/minute -j $LOG_TARGET --log-level=$LOG_LEVEL $LEXT --log-prefix="** SANITY ** "
	fi
        if [ "$RAB_LOG_HIT" == "1" ]; then
         $IPT $IPT_FLAGS -A IN_SANITY  -p tcp --tcp-flags ALL FIN -m limit --limit=$LOG_RATE/minute -j $LOG_TARGET --log-level=$LOG_LEVEL $LEXT --log-prefix="** RABHIT ** "
	fi
        $IPT $IPT_FLAGS -A IN_SANITY  -p tcp --tcp-flags ALL FIN $RAB_SANITY_FLAGS -j $TCP_STOP
        fi

        eout "{pkt_sanity} deny outbound tcp-flag pairs ALL NONE"
        eout "{pkt_sanity} deny outbound tcp-flag pairs SYN,FIN SYN,FIN"
        eout "{pkt_sanity} deny outbound tcp-flag pairs SYN,RST SYN,RST"
        eout "{pkt_sanity} deny outbound tcp-flag pairs FIN,RST FIN,RST"
        eout "{pkt_sanity} deny outbound tcp-flag pairs ACK,FIN FIN"
        eout "{pkt_sanity} deny outbound tcp-flag pairs ACK,PSH PSH"
        eout "{pkt_sanity} deny outbound tcp-flag pairs ACK,URG URG"
        if [ $EXECUTOR == "nft" ]; then
           # TODO nft
	else
	$IPT $IPT_FLAGS -N OUT_SANITY
        if [ "$LOG_DROP" == "1" ]; then
	 $IPT $IPT_FLAGS -A OUT_SANITY  -p tcp --tcp-flags ALL NONE -m limit --limit=$LOG_RATE/minute -j $LOG_TARGET --log-level=$LOG_LEVEL $LEXT --log-prefix="** SANITY ** "
	fi
	$IPT $IPT_FLAGS -A OUT_SANITY  -p tcp --tcp-flags ALL NONE -j $TCP_STOP
        if [ "$LOG_DROP" == "1" ]; then
	 $IPT $IPT_FLAGS -A OUT_SANITY  -p tcp --tcp-flags SYN,FIN SYN,FIN -m limit --limit=$LOG_RATE/minute -j $LOG_TARGET --log-level=$LOG_LEVEL $LEXT --log-prefix="** SANITY ** "
	fi
	$IPT $IPT_FLAGS -A OUT_SANITY  -p tcp --tcp-flags SYN,FIN SYN,FIN -j $TCP_STOP
        if [ "$LOG_DROP" == "1" ]; then
	 $IPT $IPT_FLAGS -A OUT_SANITY  -p tcp --tcp-flags SYN,RST SYN,RST -m limit --limit=$LOG_RATE/minute -j $LOG_TARGET --log-level=$LOG_LEVEL $LEXT --log-prefix="** SANITY ** "
	fi
	$IPT $IPT_FLAGS -A OUT_SANITY  -p tcp --tcp-flags SYN,RST SYN,RST -j $TCP_STOP
        if [ "$LOG_DROP" == "1" ]; then
	 $IPT $IPT_FLAGS -A OUT_SANITY  -p tcp --tcp-flags FIN,RST FIN,RST -m limit --limit=$LOG_RATE/minute -j $LOG_TARGET --log-level=$LOG_LEVEL $LEXT --log-prefix="** SANITY ** "
	fi
	$IPT $IPT_FLAGS -A OUT_SANITY  -p tcp --tcp-flags FIN,RST FIN,RST -j $TCP_STOP
        if [ "$LOG_DROP" == "1" ]; then
	 $IPT $IPT_FLAGS -A OUT_SANITY  -p tcp --tcp-flags ACK,FIN FIN -m limit --limit=$LOG_RATE/minute -j $LOG_TARGET --log-level=$LOG_LEVEL $LEXT --log-prefix="** SANITY ** "
	fi
	$IPT $IPT_FLAGS -A OUT_SANITY  -p tcp --tcp-flags ACK,FIN FIN -j $TCP_STOP
        if [ "$LOG_DROP" == "1" ]; then
	 $IPT $IPT_FLAGS -A OUT_SANITY  -p tcp --tcp-flags ACK,PSH PSH -m limit --limit=$LOG_RATE/minute -j $LOG_TARGET --log-level=$LOG_LEVEL $LEXT --log-prefix="** SANITY ** "
	fi
	$IPT $IPT_FLAGS -A OUT_SANITY -p tcp --tcp-flags ACK,PSH PSH -j $TCP_STOP
        if [ "$LOG_DROP" == "1" ]; then
	 $IPT $IPT_FLAGS -A OUT_SANITY -p tcp --tcp-flags ACK,URG URG -m limit --limit=$LOG_RATE/minute -j $LOG_TARGET --log-level=$LOG_LEVEL $LEXT --log-prefix="** SANITY ** "
	fi
	$IPT $IPT_FLAGS -A OUT_SANITY -p tcp --tcp-flags ACK,URG URG -j $TCP_STOP
        fi

	if [ "$PKT_SANITY_INV" == "1" ]; then
	# Block Traffic With Invalid Flags
	        eout "{pkt_sanity} check inbound for INVALID states"
	        eout "{pkt_sanity} check outbound for INVALID states"
	        eout "{pkt_sanity} deny inbound tcp-option 64"
	        eout "{pkt_sanity} deny inbound tcp-option 128"
                if [ $EXECUTOR == "nft" ]; then
                # TODO nft
                else
	        if [ "$LOG_DROP" == "1" ]; then
		 $IPT $IPT_FLAGS -A IN_SANITY -m state --state INVALID -m limit --limit=$LOG_RATE/minute -j $LOG_TARGET --log-level=$LOG_LEVEL $LEXT --log-prefix="** SANITY ** "
		fi
		$IPT $IPT_FLAGS -A IN_SANITY -m state --state INVALID -j $ALL_STOP
                if [ "$LOG_DROP" == "1" ]; then
		 $IPT $IPT_FLAGS -A IN_SANITY -p tcp --tcp-option 64 -m limit --limit=$LOG_RATE/minute -j $LOG_TARGET --log-level=$LOG_LEVEL $LEXT --log-prefix="** SANITY ** "
		fi
		$IPT $IPT_FLAGS -A IN_SANITY -p tcp --tcp-option 64 -j $TCP_STOP
                if [ "$LOG_DROP" == "1" ]; then
		 $IPT $IPT_FLAGS -A IN_SANITY -p tcp --tcp-option 128 -m limit --limit=$LOG_RATE/minute -j $LOG_TARGET --log-level=$LOG_LEVEL $LEXT --log-prefix="** SANITY ** "
		fi
		$IPT $IPT_FLAGS -A IN_SANITY -p tcp --tcp-option 128 -j $TCP_STOP
                if [ "$LOG_DROP" == "1" ]; then
		 $IPT $IPT_FLAGS -A OUT_SANITY -m state --state INVALID -m limit --limit=$LOG_RATE/minute -j $LOG_TARGET --log-level=$LOG_LEVEL $LEXT --log-prefix="** SANITY ** "
		fi
		$IPT $IPT_FLAGS -A OUT_SANITY -m state --state INVALID -j $ALL_STOP
                fi
	fi

        if [ $EXECUTOR == "nft" ]; then
           # TODO nft
        else
           $IPT $IPT_FLAGS -A OUTPUT -j OUT_SANITY
           $IPT $IPT_FLAGS -A INPUT -j IN_SANITY
        fi

	if [ "$PKT_SANITY_FUDP" == "1" ]; then
		# Block fragmented UDP
	        eout "{pkt_sanity} deny all fragmented udp"
                if [ $EXECUTOR == "nft" ]; then
                # TODO nft
                else
		$IPT $IPT_FLAGS -N FRAG_UDP
                if [ "$LOG_DROP" == "1" ]; then
		 $IPT $IPT_FLAGS -A FRAG_UDP -p udp -f -m limit --limit=$LOG_RATE/minute -j $LOG_TARGET --log-level=$LOG_LEVEL $LEXT --log-prefix "** UDP Frag ** "
		fi
                if [ "$RAB_LOG_HIT" == "1" ]; then
		 $IPT $IPT_FLAGS -A FRAG_UDP -p udp -f -m limit --limit=$LOG_RATE/minute -j $LOG_TARGET --log-level=$LOG_LEVEL $LEXT --log-prefix "** RABHIT ** "
		fi
		$IPT $IPT_FLAGS -A FRAG_UDP -p udp -f $RAB_SANITY_FLAGS -j $UDP_STOP
		$IPT $IPT_FLAGS -A INPUT -j FRAG_UDP
		$IPT $IPT_FLAGS -A OUTPUT -j FRAG_UDP
                fi
	fi
	if [ "$PKT_SANITY_PZERO" == "1" ]; then
		# Block port zero traffic
	        eout "{pkt_sanity} deny inbound tcp port 0"
	        eout "{pkt_sanity} deny outbound tcp port 0"
                if [ $EXECUTOR == "nft" ]; then
                # TODO nft
                else
		$IPT $IPT_FLAGS -N PZERO
                if [ "$LOG_DROP" == "1" ]; then
		 $IPT $IPT_FLAGS -A PZERO -p tcp --dport 0 -m limit --limit=$LOG_RATE/minute -j $LOG_TARGET --log-level=$LOG_LEVEL $LEXT --log-prefix "** Port Zero ** "
		fi
		$IPT $IPT_FLAGS -A PZERO -p tcp --dport 0 $RAB_SANITY_FLAGS -j $TCP_STOP
                if [ "$LOG_DROP" == "1" ]; then
		 $IPT $IPT_FLAGS -A PZERO -p udp --dport 0 -m limit --limit=$LOG_RATE/minute -j $LOG_TARGET --log-level=$LOG_LEVEL $LEXT --log-prefix "** Port Zero ** "
		fi
		$IPT $IPT_FLAGS -A PZERO -p udp --dport 0 $RAB_SANITY_FLAGS -j $UDP_STOP
                if [ "$LOG_DROP" == "1" ]; then
		 $IPT $IPT_FLAGS -A PZERO -p tcp --sport 0 -m limit --limit=$LOG_RATE/minute -j $LOG_TARGET --log-level=$LOG_LEVEL $LEXT --log-prefix "** Port Zero ** "
		fi
		$IPT $IPT_FLAGS -A PZERO -p tcp --sport 0 $RAB_SANITY_FLAGS -j $TCP_STOP
                if [ "$LOG_DROP" == "1" ]; then
		 $IPT $IPT_FLAGS -A PZERO -p udp --sport 0 -m limit --limit=$LOG_RATE/minute -j $LOG_TARGET --log-level=$LOG_LEVEL $LEXT --log-prefix "** Port Zero ** "
		fi
		$IPT $IPT_FLAGS -A PZERO -p udp --sport 0 $RAB_SANITY_FLAGS -j $UDP_STOP
		$IPT $IPT_FLAGS -A INPUT -j PZERO
		$IPT $IPT_FLAGS -A OUTPUT -j PZERO
                fi
	fi
fi

if [ "$BLK_IDENT" = "1" ]; then
	eout "{blk_ident} set active BLK_IDENT"
	# Reject ident request if not defined in IG_TCP_CPORTS
	if [ "$(echo $IG_TCP_CPORTS | tr ',' '\n' | grep -w 113)" == "" ]; then
		eout "{blk_ident} reject all to/from tcp port 113"
                if [ $EXECUTOR == "nft" ]; then
                # TODO nft
                else
		$IPT $IPT_FLAGS -N IDENT
                if [ "$LOG_DROP" == "1" ]; then
	         $IPT $IPT_FLAGS -A IDENT -p tcp -s 0/0 -d 0/0 --dport 113 -m limit --limit=$LOG_RATE/minute -j $LOG_TARGET --log-level=$LOG_LEVEL $LEXT --log-prefix "** IDENT ** "
		fi
	        $IPT $IPT_FLAGS -A IDENT -p tcp -s 0/0 -d 0/0 --dport 113 -j REJECT
                if [ "$LOG_DROP" == "1" ]; then
	         $IPT $IPT_FLAGS -A IDENT -p tcp -s 0/0 -d 0/0 --sport 113 -m limit --limit=$LOG_RATE/minute -j $LOG_TARGET --log-level=$LOG_LEVEL $LEXT --log-prefix "** IDENT ** "
		fi
	        $IPT $IPT_FLAGS -A IDENT -p tcp -s 0/0 -d 0/0 --sport 113 -j REJECT
                if [ "$LOG_DROP" == "1" ]; then
	         $IPT $IPT_FLAGS -A IDENT -p udp -s 0/0 -d 0/0 --dport 113 -m limit --limit=$LOG_RATE/minute -j $LOG_TARGET --log-level=$LOG_LEVEL $LEXT --log-prefix "** IDENT ** "
		fi
	        $IPT $IPT_FLAGS -A IDENT -p udp -s 0/0 -d 0/0 --dport 113 -j REJECT
                if [ "$LOG_DROP" == "1" ]; then
	         $IPT $IPT_FLAGS -A IDENT -p udp -s 0/0 -d 0/0 --sport 113 -m limit --limit=$LOG_RATE/minute -j $LOG_TARGET --log-level=$LOG_LEVEL $LEXT --log-prefix "** IDENT ** "
		fi
	        $IPT $IPT_FLAGS -A IDENT -p udp -s 0/0 -d 0/0 --sport 113 -j REJECT
		$IPT $IPT_FLAGS -A INPUT -j IDENT
		$IPT $IPT_FLAGS -A OUTPUT -j IDENT
                fi
	fi
fi

if [ "$BLK_MCATNET" == "1" ]; then
	eout "{blk_mcat} set active BLK_MCATNET"
	# Block Multicast
	eout "{blk_mcat} deny all from 224.0.0.0/8"
	eout "{blk_mcat} deny all to 224.0.0.0/8"
        if [ $EXECUTOR == "nft" ]; then
           # TODO nft
        else
	$IPT $IPT_FLAGS -N MCAST
        if [ "$LOG_DROP" == "1" ]; then
	 $IPT $IPT_FLAGS -A MCAST -s 224.0.0.0/8 -d 0/0 -m limit --limit=$LOG_RATE/minute -j $LOG_TARGET --log-level=$LOG_LEVEL $LEXT --log-prefix "** MCAST ** "
	fi
	$IPT $IPT_FLAGS -A MCAST -s 224.0.0.0/8 -d 0/0 -j $ALL_STOP
        if [ "$LOG_DROP" == "1" ]; then
	 $IPT $IPT_FLAGS -A MCAST -s 0/0 -d 224.0.0.0/8 -m limit --limit=$LOG_RATE/minute -j $LOG_TARGET --log-level=$LOG_LEVEL $LEXT --log-prefix "** MCAST ** "
	fi
	$IPT $IPT_FLAGS -A MCAST -s 0/0 -d 224.0.0.0/8 -j $ALL_STOP
	$IPT $IPT_FLAGS -A INPUT -j MCAST
	$IPT $IPT_FLAGS -A OUTPUT -j MCAST
        fi
fi

if [ ! "$BLK_P2P_PORTS" == "" ]; then
        eout "{blk_p2p} set active BLK_P2P"
        # Drop traffic to/from common p2p networks
        # winmx,napster,bittorrent,gnutella,edonkey,kazaa,morpheus
	if [ $EXECUTOR == "nft" ]; then
           # TODO nft
        else
        $IPT $IPT_FLAGS -N P2P
        for i in `echo $BLK_P2P_PORTS | tr ',' ' '`; do
                MVAL=`echo $i | grep "_"`
                PORT=$i
                if [ "$MVAL" == "" ]; then
                        eout "{blk_p2p} deny all to/from tcp port $i"
                        eout "{blk_p2p} deny all to/from udp port $i"
                        if [ "$LOG_DROP" == "1" ]; then
                         $IPT $IPT_FLAGS -A P2P  -p tcp -s 0/0 -d 0/0 --sport 1024:65534 --dport $PORT -m limit --limit=$LOG_RATE/minute -j $LOG_TARGET --log-level=$LOG_LEVEL $LEXT --log-prefix "** P2P ** "
                        fi
                        $IPT $IPT_FLAGS -A P2P  -p tcp -s 0/0 -d 0/0 --dport $PORT -j REJECT
                        if [ "$LOG_DROP" == "1" ]; then
                         $IPT $IPT_FLAGS -A P2P  -p tcp -s 0/0 -d 0/0 --dport 1024:65534 --sport $PORT -m limit --limit=$LOG_RATE/minute -j $LOG_TARGET --log-level=$LOG_LEVEL $LEXT --log-prefix "** P2P ** "
                        fi
                        $IPT $IPT_FLAGS -A P2P  -p tcp -s 0/0 -d 0/0 --dport 1024:65534 --sport $PORT -j REJECT
                        if [ "$LOG_DROP" == "1" ]; then
                         $IPT $IPT_FLAGS -A P2P  -p udp -s 0/0 -d 0/0 --sport 1024:65534 --dport $PORT -m limit --limit=$LOG_RATE/minute -j $LOG_TARGET --log-level=$LOG_LEVEL $LEXT --log-prefix "** P2P ** "
                        fi
                        $IPT $IPT_FLAGS -A P2P  -p udp -s 0/0 -d 0/0 --sport 1024:65534 --dport $PORT -j REJECT
                        if [ "$LOG_DROP" == "1" ]; then
                         $IPT $IPT_FLAGS -A P2P  -p udp -s 0/0 -d 0/0 --dport 1024:65534 --sport $PORT -m limit --limit=$LOG_RATE/minute -j $LOG_TARGET --log-level=$LOG_LEVEL $LEXT --log-prefix "** P2P ** "
                        fi
                        $IPT $IPT_FLAGS -A P2P  -p udp -s 0/0 -d 0/0 --dport 1024:65534 --sport $PORT -j REJECT
                else
                        PORT_BEG=`echo $i | tr '_' ' ' | awk '{print$1}'`
                        PORT_END=`echo $i | tr '_' ' ' | awk '{print$2}'`
                        PORTST="$PORT_BEG:$PORT_END"
                        eout "{blk_p2p} deny all to/from tcp port $PORTST"
                        eout "{blk_p2p} deny all to/from udp port $PORTST"
                        if [ "$LOG_DROP" == "1" ]; then
                         $IPT $IPT_FLAGS -A P2P  -p tcp -s 0/0 -d 0/0 --sport 1024:65534 --dport $PORTST -m limit --limit=$LOG_RATE/minute -j $LOG_TARGET --log-level=$LOG_LEVEL $LEXT --log-prefix "** P2P ** "
                        fi
                        $IPT $IPT_FLAGS -A P2P  -p tcp -s 0/0 -d 0/0 --sport 1024:65534 --dport $PORTST -j REJECT
                        if [ "$LOG_DROP" == "1" ]; then
                         $IPT $IPT_FLAGS -A P2P  -p tcp -s 0/0 -d 0/0 --dport 1024:65534 --sport $PORTST -m limit --limit=$LOG_RATE/minute -j $LOG_TARGET --log-level=$LOG_LEVEL $LEXT --log-prefix "** P2P ** "
                        fi
                        $IPT $IPT_FLAGS -A P2P  -p tcp -s 0/0 -d 0/0 --dport 1024:65534 --sport $PORTST -j REJECT
                        if [ "$LOG_DROP" == "1" ]; then
                         $IPT $IPT_FLAGS -A P2P  -p udp -s 0/0 -d 0/0 --sport 1024:65534 --dport $PORTST -m limit --limit=$LOG_RATE/minute -j $LOG_TARGET --log-level=$LOG_LEVEL $LEXT --log-prefix "** P2P ** "
                        fi
                        $IPT $IPT_FLAGS -A P2P  -p udp -s 0/0 -d 0/0 --sport 1024:65534 --dport $PORTST -j REJECT
                        if [ "$LOG_DROP" == "1" ]; then
                         $IPT $IPT_FLAGS -A P2P  -p udp -s 0/0 -d 0/0 --dport 1024:65534 --sport $PORTST -m limit --limit=$LOG_RATE/minute -j $LOG_TARGET --log-level=$LOG_LEVEL $LEXT --log-prefix "** P2P ** "
                        fi
                        $IPT $IPT_FLAGS -A P2P  -p udp -s 0/0 -d 0/0 --dport 1024:65534 --sport $PORTST -j REJECT
                fi
        done
        $IPT $IPT_FLAGS -A INPUT -j P2P
        $IPT $IPT_FLAGS -A OUTPUT -j P2P
        fi
fi

if [ "$BLK_TCP_SACK_PANIC" == "1" ] && [ ! "$SYSCTL_TCP_NOSACK" == "1" ]; then
	eout "{blk_tcp_sack_panic} applying mitigation for TCP SACK Panic CVE-2019-11477, CVE-2019-11478, CVE-2019-11479 https://access.redhat.com/security/vulnerabilities/tcpsack"
	eout "{blk_tcp_sack_panic} deny inbound tcp-flags SYN with MSS size 1 to 500 bytes "
        if [ $EXECUTOR == "nft" ]; then
           # TODO nft
        else
	$IPT $IPT_FLAGS -I INPUT -p tcp --tcp-flags SYN SYN -m tcpmss --mss 1:500 -j $TCP_STOP
	if [ "$USE_IPV6" == "1" ]; then
		$IP6T -I INPUT -p tcp --tcp-flags SYN SYN -m tcpmss --mss 1:500 -j $TCP_STOP
	fi
        fi
fi
